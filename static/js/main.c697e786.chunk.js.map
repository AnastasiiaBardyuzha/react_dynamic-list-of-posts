{"version":3,"sources":["api_helpers.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/Comments/Comments.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","index.tsx","App.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","getPreparedPosts","users","posts","comments","preparedPosts","map","post","user","find","userId","id","filter","comment","postId","User","name","email","city","address","className","Comment","body","Comments","key","Post","title","PostsList","ReactDOM","render","useState","setPosts","searchPost","setSearchPost","isLoading","setIsLoading","isLoaded","setIsLoaded","showedAllPosts","postsFromApi","searchedPost","useMemo","toLowerCase","includes","console","log","htmlFor","type","placeholder","onChange","event","search","target","value","onClick","document","getElementById"],"mappings":"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","file":"static/js/main.c697e786.chunk.js","sourcesContent":["import { UserInterface, Post, CommentInterface, PreparedPost } from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getPosts = (): Promise<Post[]> => {\n  return getData<Post[]>(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<UserInterface[]> => {\n  return getData<UserInterface[]>(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<CommentInterface[]> => {\n  return getData<CommentInterface[]>(`${API_URL}comments`);\n};\n\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const users: UserInterface[] = await getUsers();\n  const posts: Post[] = await getPosts();\n  const comments: CommentInterface[] = await getComments();\n\n  const preparedPosts: PreparedPost[] = posts.map(post => (\n    {\n      ...post,\n      user: users.find(user => post.userId === user.id),\n      comments: comments.filter(comment => post.id === comment.postId),\n    }\n  ));\n\n  return preparedPosts\n}\n","import React, { FC } from 'react';\nimport { UserInterface } from '../../types';\n\nimport './User.css';\n\ninterface Props {\n  user: UserInterface\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user_info\">\n      <span>{`${name} -`}</span>\n      <span>{`${email} -`}</span>\n      <span>{`${city} -`}</span>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CommentInterface } from '../../types';\n\nimport './Comment.css';\n\ninterface Props {\n  comment: CommentInterface\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <li className=\"сomment\">\n      <span className=\"сomment__name\">{`${name} (${email})`}</span>\n      <p className=\"сomment__body\">{body}</p>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentInterface } from '../../types';\n\nimport './Comments.css';\n\ninterface Props {\n  comments: CommentInterface[]\n}\n\nexport const Comments: FC<Props> = ({ comments }) => (\n  <ul className=\"comments\">\n    {comments.map(comment => <Comment key={comment.id} comment={comment} />)}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { PreparedPost } from '../../types';\nimport { User } from '../User/User';\nimport { Comments } from '../Comments/Comments';\n\nimport './Post.css';\n\ninterface Props {\n  post: PreparedPost\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const { title, body, user, comments } = post;\n\n  return (\n    <li className=\"post\">\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__body\">{body}</p>\n      {user && <User user={user} />}\n      {comments && <Comments comments={comments} />}\n    </li>\n  );\n}\n","import React, { FC } from 'react';\nimport { PreparedPost } from '../../types';\nimport { Post } from '../Post/Post';\n\nimport './PostsList.css';\n\ninterface Props {\n  posts: PreparedPost[]\n}\n\nexport const PostsList: FC<Props> = ({ posts }) => (\n  <ul className=\"posts_wrapper\">\n    {posts.map(post => <Post key={post.id} post={post} />)}\n  </ul>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC, useState, useMemo } from 'react';\nimport { PreparedPost } from './types';\nimport { getPreparedPosts } from './api_helpers';\nimport { PostsList } from './components/PostsList/PostsList';\nimport './App.css';\n\nexport const App: FC = () => {\n  const [posts, setPosts] = useState<PreparedPost[]>([]);\n  const [searchPost, setSearchPost] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const showedAllPosts = async () => {\n    setIsLoading(true);\n\n    const postsFromApi = await getPreparedPosts();\n\n    setPosts(postsFromApi);\n    setIsLoading(false);\n    setIsLoaded(true);\n  }\n\n  const filtered = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: search } = event.target;\n    setSearchPost(search);\n  }\n\n  const searchedPost = useMemo(() => posts.filter(\n    post => post.title.toLowerCase().includes(searchPost)\n    || post.body.toLowerCase().includes(searchPost),\n  ), [posts, searchPost]);\n\n  if (isLoading) {\n   return (\n     <p className=\"loading\">\n     Loading...\n     </p>\n   );\n }\n console.log(posts);\n\n  return (\n    <div className=\"wrapper\">\n    <h1>Dynamic list of posts</h1>\n    {(\n        !isLoaded\n        ? (\n            <>\n              <p className=\"initual_loading\">\n                Load posts\n              </p>\n              <button\n                type=\"button\"\n                className=\"loading_button\"\n                onClick={showedAllPosts}\n              >\n                Load\n              </button>\n            </>\n           )\n          : (\n              <>\n                <label htmlFor=\"search-query\" className=\"label\">\n                  Search Post\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"search-query\"\n                  className=\"search_input\"\n                  placeholder=\"Type search word\"\n                  onChange={filtered}\n                />\n                <PostsList posts={searchedPost} />\n              </>\n            )\n        )}\n      </div>\n    )\n  };\n"],"sourceRoot":""}